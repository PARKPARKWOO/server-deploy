name: Deploy Selected Server Containers

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      services:
        description: "Select services to deploy (comma-separated if multiple)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - orchestrator
          - auth-server
          - find-my-pet-backend
          - barbellrobot-backend
          - gateway
          - eureka

jobs:
  deploy:
    runs-on: [self-hosted, label-deploy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables
        shell: bash
        run: |
          echo "ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "SERVICES=${{ inputs.services }}" >> $GITHUB_ENV

      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy selected services with Docker Compose
        shell: bash
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          RDBMS_USERNAME: ${{ secrets.RDBMS_USERNAME }}
          RDBMS_PASSWORD: ${{ secrets.RDBMS_PASSWORD }}
          GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
          GEMINI_PROJECT_ID: ${{ secrets.GEMINI_PROJECT_ID }}
          GEMINI_LOCATION: ${{ secrets.GEMINI_LOCATION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
          ACCESS_SECRET_KEY: ${{ secrets.ACCESS_SECRET_KEY }}
          ACCESS_EXPIRE_MILLIS: ${{ secrets.ACCESS_EXPIRE_MILLIS }}
          REFRESH_SECRET_KEY: ${{ secrets.REFRESH_SECRET_KEY }}
          REFRESH_EXPIRE_MILLIS: ${{ secrets.REFRESH_EXPIRE_MILLIS }}
          CLOUD_FRONT_DOMAIN_NAME: ${{ secrets.CLOUD_FRONT_DOMAIN_NAME }}
          FMP_GOOGLE_CLIENT_ID: ${{ secrets.FMP_GOOGLE_CLIENT_ID }}
          FMP_GOOGLE_CLIENT_SECRET: ${{ secrets.FMP_GOOGLE_CLIENT_SECRET }}
          FMP_KAKAO_CLIENT_ID: ${{ secrets.FMP_KAKAO_CLIENT_ID }}
          IP_ALLOW_LIST: ${{ secrets.IP_ALLOW_LIST }}
#        run: |
#          if [[ "${{ env.SERVICES }}" == "all" ]]; then
#            echo "Deploying all services..."
#            docker-compose -f "compose/${{ env.ENVIRONMENT }}/server/docker-compose.yml" up -d
#          else
#            echo "Deploying selected service: ${{ env.SERVICES }}"
#            docker-compose -f "compose/${{ env.ENVIRONMENT }}/server/docker-compose.yml" up -d "${{ env.SERVICES }}"
#          fi
        run: |
          echo "Initializing Docker Swarm (if not already initialized)..."
          docker swarm init || echo "Swarm already initialized"

          if [[ "${{ env.SERVICES }}" == "all" ]]; then
            echo "Deploying all services to Swarm..."
            docker stack deploy -c "compose/${{ env.ENVIRONMENT }}/server/docker-compose.yml" ${{ env.ENVIRONMENT }}
          else
            echo "Deploying selected service: ${{ env.SERVICES }}"
            docker stack deploy -c "compose/${{ env.ENVIRONMENT }}/server/docker-compose.yml" ${{ env.ENVIRONMENT }}
          fi

          echo "Checking deployed services..."
          docker service ls
