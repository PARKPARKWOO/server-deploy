version: '3.8'

secrets:
  minio_root_user:
    external: true
  minio_root_password:
    external: true

services:
  redis:
    image: redis:8.2.1
    container_name: redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - internal-network
    ports:
      - "6379:6379"
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname == pve"

  mysql-master:
    image: mysql:8.4
    container_name: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: ${RDBMS_PASSWORD}
      TZ: Asia/Seoul            # 컨테이너 OS 타임존
    command: [
      "--server-id=1",
      "--log-bin=mysql-bin",
      "--binlog-format=ROW",
      "--binlog_row_image=FULL",
      "--gtid-mode=ON",
      "--enforce-gtid-consistency=ON",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_0900_ai_ci",
    ]
    restart: always
    networks:
      - barbellrobot-backend
      - find-my-pet-backend
      - internal-network
    volumes:
      - barbellrobot-mysql-data:/var/lib/mysql
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname == my"

  mysql-replica-1:
    image: mysql:8.4
    container_name: mysql-replica-1
    environment:
      MYSQL_ROOT_PASSWORD: ${RDBMS_PASSWORD}
      TZ: Asia/Seoul
    command: [
      "--server-id=2",
      "--relay-log=replica1-relay-bin",
      "--read-only=ON",
      "--super_read_only=ON",
      "--log-bin=mysql-bin",
      "--binlog-format=ROW",
      "--binlog_row_image=FULL",
      "--gtid-mode=ON",
      "--enforce-gtid-consistency=ON",
      "--character-set-server=utf8mb4",
      "--default-time-zone=SYSTEM"
    ]
    restart: always
    networks:
      - internal-network
    volumes:
      - mysql-replica-volume-1:/var/lib/mysql
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname == pve"

  mongodb:
    image: mongo:8.0.13
    container_name: mongodb
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname == my"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - find-my-pet-backend
      - internal-network

  cassandra-1:
    image: cassandra:5.0.5
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.hostname == pve
    environment:
      JVM_OPTS: >-
        -Xms1G -Xmx1G
        -XX:MaxDirectMemorySize=512m
        -XX:+AlwaysPreTouch
        -XX:+ExitOnOutOfMemoryError
        -XX:MaxGCPauseMillis=200
    volumes:
      - cassandra-1:/var/lib/cassandra
    networks:
      - internal-network

  minio-1:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    command: ["server","--console-address",":9001","/data1"]
    environment:
      # Secrets via *_FILE
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password

      # Traefik 뒤에서 올바른 외부 URL 고정
      MINIO_SERVER_URL: https://bucket.platformholder.site
      MINIO_BROWSER_REDIRECT_URL: https://minio.platformholder.site
      IP_ALLOW_LIST: ${IP_ALLOW_LIST}
      # 필요시 자동암호화(KMS 붙이면 KES 설정 사용)
      # MINIO_KMS_AUTO_ENCRYPTION: "on"

    volumes:
      - minio-1-data1:/data1
    secrets:
      - minio_root_user
      - minio_root_password

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == pve
      labels:
        - "traefik.enable=true"
        # S3 API
        - "traefik.http.routers.minio-s3.rule=Host(`bucket.platformholder.site`)"
        - "traefik.http.routers.minio-s3.entrypoints=websecure"
        - "traefik.http.routers.minio-s3.tls.certresolver=myresolver"
        - "traefik.http.services.minio-s3.loadbalancer.server.port=9000"
        - "traefik.http.routers.minio-s3.service=minio-s3"

        # Console
        - "traefik.http.routers.minio-console.rule=Host(`minio.platformholder.site`)"
        - "traefik.http.routers.minio-console.entrypoints=websecure"
        - "traefik.http.routers.minio-console.tls.certresolver=myresolver"
        - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
        - "traefik.http.routers.minio-console.service=minio-console"
        # white list 처리
#        - "traefik.http.routers.minio-console.middlewares=minio-console-ipwhitelist@docker"
#        - "traefik.http.middlewares.minio-console-ipwhitelist.ipwhitelist.sourcerange=${IP_ALLOW_LIST}"
        # (선택) 큰 업로드에 대비한 서버 타임아웃 별도 ServersTransport 연결
        # - "traefik.http.routers.minio-s3.transport=slow"
        # - "traefik.http.serversTransports.slow.forwardingTimeouts.readTimeout=600s"
        # - "traefik.http.serversTransports.slow.forwardingTimeouts.idleTimeout=600s"
        # - "traefik.http.serversTransports.slow.forwardingTimeouts.responseHeaderTimeout=600s"
    networks:
      - internal-network
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio-2:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    command: ["server","--console-address",":9001","/data1"]
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password
      MINIO_SERVER_URL: https://bucket.platformholder.site
      MINIO_BROWSER_REDIRECT_URL: https://minio.platformholder.site
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - minio-2-data1:/data1
    secrets:
      - minio_root_user
      - minio_root_password
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == my
      # 굳이 Traefik 라벨은 여기에 또 달 필요 없음(간단히 minio-1만 외부 노출)
      # 내부 서비스는 internal-network 통해 minio-2로도 직접 접근 가능
    networks:
      - internal-network

networks:
  barbellrobot-backend:
    driver: overlay
    name: barbellrobot-backend
    attachable: true
  find-my-pet-backend:
    driver: overlay
    name: find-my-pet-backend
    attachable: true
  internal-network:
    driver: overlay
    name: internal-network
    attachable: true

volumes:
  barbellrobot-mysql-data:
  find-my-pet-mysql-data:
  mongo-data:
  cassandra-1:
  mysql-replica-volume-1:
  minio-1-data1:
  minio-2-data1:

