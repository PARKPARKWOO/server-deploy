services:
  reverse-proxy:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=wy9295@naver.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    #      - "--entrypoints.dashboard.address=:8081"
    ports:
      - "8080:8080"
      - "443:443"
      - "80:80"
#      - "8081:8081"
    networks:
      - internal_network
      - find-my-pet-backend
      - barbellrobot-backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
  find-my-pet-backend:
    image: 'wy9295/find-my-pet-backend:0181b8aff11316a64eff81dc63436c1572375c5d'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.find-my-pet-backend.rule=Host(`find-my-pet.duckdns.org`)"
      - "traefik.http.services.find-my-pet-backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.find-my-pet-backend.entrypoints=websecure"
      - "traefik.http.routers.find-my-pet-backend.tls=true"
      - "traefik.http.routers.find-my-pet-backend.tls.certresolver=myresolver"
      - "traefik.docker.network=find-my-pet-backend"
    networks:
      - internal_network
      - find-my-pet-backend
    environment:
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RDBMS_URI=find-my-pet-mysql
      - RDBMS_USERNAME=${RDBMS_USERNAME}
      - RDBMS_PASSWORD=${RDBMS_PASSWORD}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_KEY=${AWS_S3_SECRET_KEY}
      - ACCESS_SECRET_KEY=${ACCESS_SECRET_KEY}
      - ACCESS_EXPIRE_MILLIS=${ACCESS_EXPIRE_MILLIS}
      - REFRESH_SECRET_KEY=${REFRESH_SECRET_KEY}
      - REFRESH_EXPIRE_MILLIS=${REFRESH_EXPIRE_MILLIS}
      - CLOUD_FRONT_DOMAIN_NAME=${CLOUD_FRONT_DOMAIN_NAME}
      - FMP_KAKAO_CLIENT_ID=${FMP_KAKAO_CLIENT_ID}
      - FMP_GOOGLE_CLIENT_ID=${FMP_GOOGLE_CLIENT_ID}
      - FMP_GOOGLE_CLIENT_SECRET=${FMP_GOOGLE_CLIENT_SECRET}
  barbellrobot-backend:
    image: 'wy9295/barbellrobot-backend:55b676e0f33e8010dc09c99cfdb4707aef32b455'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.barbellrobot-backend.rule=Host(`wooyoung.duckdns.org`)"
      - "traefik.http.services.barbellrobot-backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.barbellrobot-backend.entrypoints=websecure"
      - "traefik.http.routers.barbellrobot-backend.tls=true"
      - "traefik.http.routers.barbellrobot-backend.tls.certresolver=myresolver"
      - "traefik.docker.network=barbellrobot-backend"
    networks:
      - internal_network
      - barbellrobot-backend
    volumes:
      - /root/google/key.json:/root/.config/gcloud/key.json:ro

    environment:
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RDBMS_URI=barbell-robot-mysql
      - RDBMS_USERNAME=${RDBMS_USERNAME}
      - RDBMS_PASSWORD=${RDBMS_PASSWORD}
      - GMAIL_USERNAME=${GMAIL_USERNAME}
      - GMAIL_PASSWORD=${GMAIL_PASSWORD}
      - GEMINI_PROJECT_ID=${GEMINI_PROJECT_ID}
      - GEMINI_LOCATION=${GEMINI_LOCATION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_KEY=${AWS_S3_SECRET_KEY}
      - ACCESS_SECRET_KEY=${ACCESS_SECRET_KEY}
      - ACCESS_EXPIRE_MILLIS=${ACCESS_EXPIRE_MILLIS}
      - REFRESH_SECRET_KEY=${REFRESH_SECRET_KEY}
      - REFRESH_EXPIRE_MILLIS=${REFRESH_EXPIRE_MILLIS}
      - CLOUD_FRONT_DOMAIN_NAME=${CLOUD_FRONT_DOMAIN_NAME}
  redis:
    image: redis:latest
    container_name: redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - internal_network
    ports:
      - "6379:6379"

  barbell-robot-mysql:
    image: mysql:8.4
    container_name: barbell-robot-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${RDBMS_PASSWORD}
    restart: always
    networks:
      - barbellrobot-backend
    volumes:
      - barbellrobot-mysql-data:/var/lib/mysql
  find-my-pet-mysql:
    image: mysql:8.4
    container_name: find-my-pet-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${RDBMS_PASSWORD}
    restart: always
    networks:
      - find-my-pet-backend
    volumes:
      - find-my-pet-mysql-data:/var/lib/mysql
  loki:
    image: grafana/loki:2.9.0
    # loki 접근은 외부에서 못하도록 설정
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - internal_network
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - internal_network

networks:
  barbellrobot-backend:
    driver: bridge
  find-my-pet-backend:
    driver: bridge
  internal_network:
    driver: bridge
  external-network:
    driver: bridge

volumes:
  barbellrobot-mysql-data:
  find-my-pet-mysql-data:
